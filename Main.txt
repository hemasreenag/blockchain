AdminController



package com.example.ecommerce.controller;





import java.io.File;

import java.io.IOException; import java.nio.file.Files; import java.nio.file.Path; import java.nio.file.Paths;
import java.nio.file.StandardCopyOption; import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;

import org.springframework.beans.factory.annotation.Value;
 
import org.springframework.core.io.ClassPathResource; import org.springframework.stereotype.Controller; import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.ModelAttribute; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestParam; import org.springframework.web.multipart.MultipartFile;
import com.example.ecommerce.dto.ProductDTO; import com.example.ecommerce.model.Category; import com.example.ecommerce.model.Product;
import com.example.ecommerce.repository.ProductRepository; import com.example.ecommerce.service.CategoryService; import com.example.ecommerce.service.ProductService;




@Controller
 
@CrossOrigin(origins = "*")



public class AdminController {



/*

* @Value("${file.path}") private String uploadDir;

*/



//= System.getProperty("user.dir")



//	public static String	uploadDir = System.getProperty("user.dir") + "/static/img";


@Autowired ProductService productServe;





@Autowired

CategoryService categoryServe;
 



@GetMapping("/admin") public String adminHome() {


return "adminHome";

}



@GetMapping("/admin/login") public String viewAdminLoginPage() {
return "adminLogin";

}



@GetMapping("admin/categories")



public String getCat(Model model) {



model.addAttribute("categories", categoryServe.getAllCategory());
 
return "categories";

}



@GetMapping("/admin/categories/add")



public String getCatAdd(Model model) { model.addAttribute("category", new Category()); return "categoriesAdd";
}



@PostMapping("/admin/categories/add")

public	String	postCatAdd(@ModelAttribute("category")	Category category) {
categoryServe.addcategory(category); return "redirect:/admin/categories";
}



@GetMapping("/admin/categories/delete/{id}") public String deleteCat(@PathVariable int id) {
 
categoryServe.removeCategoryById(id); return "redirect:/admin/categories";


}



@GetMapping("/admin/categories/update/{id}")



public String updateCart(@PathVariable int id, Model model) {



Optional<Category> category=categoryServe.getCategoryById(id); if(category.isPresent()) {






model.addAttribute("category",	category.get());	return "categoriesAdd"; }else


return "404";
 
}





@GetMapping("/admin/products")	public	String products(Model model) {
model.addAttribute("products", productServe.getAllProduct());
return

"products";



}



@GetMapping("/admin/products/add")	public	String productAddGet(Model model) {
model.addAttribute("productDTO", new ProductDTO());

model.addAttribute("categories", categoryServe.getAllCategory());


return "productsAdd"; }
 
@PostMapping("/admin/products/add")



public	String
productAddPost(@ModelAttribute("productDTO")ProductDTO productDTO,


@RequestParam("img")MultipartFile file,



@RequestParam("imgName")String	imgName)	throws IOException {


Product product =new Product(); product.setId(productDTO.getId()); product.setName(productDTO.getName());

product.setCategory(categoryServe.getCategoryById(productDTO.getCatego ryId()).get()); product.setPrice(productDTO.getPrice());
product.setWeight(productDTO.getWeight()); product.setDescription(productDTO.getDescription());
 
product.setImageName(file.getOriginalFilename());



Product uploadImg = new Product();



if (uploadImg != null) { try {


File	saveFile	=	new ClassPathResource("static/img").getFile();



Path		path	=
Paths.get(saveFile.getAbsolutePath()
file.getOriginalFilename());	+	File.separator	+
System.out.println(path); Files.copy(file.getInputStream(),	path,
StandardCopyOption.REPLACE_EXISTING);



} catch (Exception e) { e.printStackTrace();
}
 
}



//		session.setAttribute("msg", "Image Upload Sucessfully"); productServe.addProduct(product);


return "redirect:/admin/products"; }





@GetMapping("/admin/product/delete/{id}") public String deleteProduct(@PathVariable long id) {


productServe.removeProductById(id);	return "redirect:/admin/products";


}



@GetMapping("/admin/product/update/{id}") public String updateProductGet(@PathVariable long id, Model model) {
 
Product product= productServe.getProductById(id).get();



ProductDTO productDTO= new ProductDTO();



productDTO.setId(product.getId()); productDTO.setName(product.getName());
productDTO.setCategoryId((product.getCategory().getId())); productDTO.setPrice(product.getPrice()); productDTO.setWeight((product.getWeight())); productDTO.setDescription(product.getDescription()); productDTO.setImageName(product.getImageName());


model.addAttribute("categories", categoryServe.getAllCategory());
model.addAttribute("productDTO", productDTO);



return "productsAdd";
 
}



}



CartController





package com.example.ecommerce.controller;



import java.security.NoSuchAlgorithmException; import java.security.Principal;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired; import org.springframework.beans.factory.annotation.Value; import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.CrossOrigin; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable;
 
import org.springframework.web.bind.annotation.PostMapping; import org.springframework.web.bind.annotation.RequestMapping; import com.example.ecommerce.global.GlobalData;
import com.example.ecommerce.model.Product; import com.example.ecommerce.service.Generator;
import com.example.ecommerce.service.ProductService; import com.example.ecommerce.service.Webservice;




@Controller



public class CartController {



@Autowired

private Generator generator;



@Autowired

private Webservice webService;
 
@Autowired

ProductService productServe;





@Value("${coupon.startdate}") private String startdate;


@Value("${coupon.discount}") private String discount;


@Value("${coupon.stopdate}") private String stopdate;




@GetMapping("/addToCart/{id}")


public String addToCart(@PathVariable int id) { GlobalData.cart.add(productServe.getProductById(id).get());
 
return "redirect:/shop";



}



@GetMapping("/cart")





public String cartGet(Model model) { model.addAttribute("cartCount", GlobalData.cart.size());


model.addAttribute("total", GlobalData.cart.stream().mapToDouble(Product::getPrice).sum());
// model.addAttribute("discount", "1000");



model.addAttribute("cart", GlobalData.cart);



return "cart";



}
 
@RequestMapping("/coupon")





public	String	coupon(Model	model,	@Valid	String	coupon)	throws NoSuchAlgorithmException {
model.addAttribute("cartCount", GlobalData.cart.size());



//double dis=Double.parseDouble(discount);



Webservice web=new Webservice();



System.out.println(coupon);



String getcoup= web.getCoupon(coupon); String[] parts=getcoup.split(",");
String status=parts[0].substring(1,parts[0].length());
 
String discount=parts[1].substring(1,parts[1].length()-2);







System.out.println("status="+status);

//System.out.println("dis="+dis);



double dis=0;





if(status.equals("true")) { dis=Double.parseDouble(discount); model.addAttribute("discount",dis); System.out.println("discount"+dis);


}else {


model.addAttribute("discount", discount); System.out.println("discount"+discount);
 
}





System.out.println("coupon="+getcoup);



model.addAttribute("total", GlobalData.cart.stream().mapToDouble(Product::getPrice).sum());


model.addAttribute("finalAmount",GlobalData.cart.stream().mapToDouble( Product::getPrice).sum()-dis);




model.addAttribute("cart", GlobalData.cart);



return "checkout";





}
 
@GetMapping("/cart/removeItem/{index}")



public String cartItemRemove(@PathVariable int index) { GlobalData.cart.remove(index);
return "redirect:/cart";



}







@GetMapping("/gotocheckout")



public String checkout(Model model) {


model.addAttribute("total",GlobalData.cart.stream().mapToDouble(Product:
:getPrice).sum());


model.addAttribute("finalAmount",GlobalData.cart.stream().mapToDouble( Product::getPrice).sum());
 
return "checkout";



}





@PostMapping("/checkout")



public String checkout(Model model, String username,Principal principal) throws NoSuchAlgorithmException {




model.addAttribute("finalAmount",GlobalData.cart.stream().mapToDouble( Product::getPrice).sum());




model.addAttribute("total",GlobalData.cart.stream().mapToDouble(Product:
:getPrice).sum());

double price=GlobalData.cart.stream().mapToDouble(Product::getPrice).sum();
 
Webservice web=new Webservice();

// System.out.println("coupon1: " + coupon);





if(price>2000) {




String coupon=webService.randomcode(); generator.sendSimpleEmail(principal.getName(),	coupon,"Find
couponid below");

model.addAttribute("emailstatus",""

+ "Payment completed "

+ "Congradulation... you have won the coupon code has been sent to your email Verify and make use of it until the validity date");


System.out.println("coupon1: " + coupon); System.out.println("startdate1: " + startdate); System.out.println("stopdate1: " + stopdate);
 
System.out.println("discount1: " + discount);



String test= web.createCoupon(startdate,stopdate,discount,coupon);



System.out.println("test="+test);

}else if(price>3000) {




String coupon=webService.randomcode(); generator.sendSimpleEmail(principal.getName(),	coupon,"Find
couponid below");

model.addAttribute("emailstatus",""

+ "Payment completed "

+ "Congradulation... you have won the coupon code, has been sent to your email Verify and make use of it until the validity date");


System.out.println("coupon1: " + coupon); System.out.println("startdate1: " + startdate); System.out.println("stopdate1: " + stopdate);
 
System.out.println("discount1: " + discount);



String test= web.createCoupon(startdate,stopdate,discount,coupon);



System.out.println("test="+test);



}else {



model.addAttribute("payStatus","Payment Completed Successfully");



}



return "checkout";



}





}
 
HomeController





package com.example.ecommerce.controller;



import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import org.springframework.web.bind.annotation.CrossOrigin; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable; import org.springframework.web.bind.annotation.RequestMapping;


import com.example.ecommerce.global.GlobalData; import com.example.ecommerce.model.AddCoupon; import com.example.ecommerce.service.CategoryService; import com.example.ecommerce.service.ProductService;
 
@Controller





public class HomeController {



@Autowired

CategoryService categoryServe;





@Autowired ProductService productServe;





@Autowired AddCoupon addCoupon;





@GetMapping({"/","/home"})



public String home(Model model) {
 
model.addAttribute("cartCount", GlobalData.cart.size());



return "index";



}





@GetMapping("/shop")

public String shop(Model model) {



model.addAttribute("categories", categoryServe.getAllCategory()); model.addAttribute("products", productServe.getAllProduct()); model.addAttribute("cartCount", GlobalData.cart.size());


return "shop";

}
 
@GetMapping("/shop/category/{id}")



public String shopByCategory(Model model, @PathVariable int id) {



model.addAttribute("categories", categoryServe.getAllCategory()); model.addAttribute("cartCount", GlobalData.cart.size());
model.addAttribute("products", productServe.getAllProductsByCategoryId(id));


return "shop";

}







@GetMapping("/shop/viewproduct/{id}")

public String viewProduct(Model model, @PathVariable int id) {



model.addAttribute("product", productServe.getProductById(id).get());
 
model.addAttribute("cartCount", GlobalData.cart.size());



return "viewProduct";

}





}



UserImplementation



package com.example.ecommerce.controller;



import org.springframework.beans.factory.annotation.Autowired; import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;

import org.springframework.web.bind.annotation.CrossOrigin; import org.springframework.web.bind.annotation.GetMapping; import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
 
import com.example.ecommerce.global.GlobalData; import com.example.ecommerce.model.AddCoupon; import com.example.ecommerce.service.CategoryService; import com.example.ecommerce.service.ProductService;




@Controller





public class HomeController {



@Autowired

CategoryService categoryServe;





@Autowired ProductService productServe;
 
@Autowired AddCoupon addCoupon;





@GetMapping({"/","/home"})



public String home(Model model) {



model.addAttribute("cartCount", GlobalData.cart.size());



return "index";



}





@GetMapping("/shop")

public String shop(Model model) {


model.addAttribute("categories", categoryServe.getAllCategory()); model.addAttribute("products", productServe.getAllProduct());
 
model.addAttribute("cartCount", GlobalData.cart.size());



return "shop";

}







@GetMapping("/shop/category/{id}")



public String shopByCategory(Model model, @PathVariable int id) {



model.addAttribute("categories", categoryServe.getAllCategory()); model.addAttribute("cartCount", GlobalData.cart.size());
model.addAttribute("products", productServe.getAllProductsByCategoryId(id));


return "shop";

}
 



@GetMapping("/shop/viewproduct/{id}")

public String viewProduct(Model model, @PathVariable int id) {



model.addAttribute("product", productServe.getProductById(id).get());
model.addAttribute("cartCount", GlobalData.cart.size());



return "viewProduct";

}





}



product Service





package com.example.ecommerce.service;
 
import java.util.List; import java.util.Optional; import
org.springframework.beans.factory.annotation.Autowired; import
org.springframework.stereotype.Service;



import com.example.ecommerce.model.Product;

import com.example.ecommerce.repository.ProductRepository;





@Service



public class ProductService {



@Autowired

ProductRepository productRepo;
 
public List<Product> getAllProduct(){ return productRepo.findAll();
}



public void addProduct(Product product) {



productRepo.save(product);



}



public void removeProductById(long id) {



productRepo.deleteById(id);

}



public Optional<Product> getProductById(long id){



return productRepo.findById(id);

}
 
public List<Product> getAllProductsByCategoryId(int id){



return productRepo.findAllByCategory_Id(id); }





}
